{"version":3,"sources":["TasksList.js","TasksGrid.js","index.js"],"names":["TasksList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","newTask","task","index","console","log","status","isComplete","react_default","a","createElement","className","key","onClick","changeStatus","title","tasks","taskList","map","React","Component","TasksGrid","App","clearTask","setState","listView","view","gridView","list","TasksList_TasksList","state","grid","TasksGrid_TasksGrid","e","preventDefault","inputTask","value","enteredTask","prevState","concat","toConsumableArray","changeview","_this2","onSubmit","onEnter","type","placeholder","ref","todo","setTaskType","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ba159b6e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\n\r\nexport default class TasksList extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        console.log(props);\r\n    }    \r\n\r\n    newTask = (task, index) => {\r\n        console.log(this.props.status);\r\n       if( this.props.status == 'all' || task.isComplete == this.props.status)\r\n            return (\r\n                <p className = 'listedTask' key={index} onClick={()=>{this.props.changeStatus(index)}}> \r\n                        {task.title}\r\n                </p>\r\n            );\r\n    }\r\n\r\n    render(){\r\n        var tasks = this.props.taskList.map(this.newTask);\r\n        return (\r\n            <div className = 'tasks'>\r\n                {tasks}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './index.css';\r\n\r\nexport default class TasksGrid extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        console.log(props);\r\n    }    \r\n\r\n    newTask = (task, index) => {\r\n        console.log(this.props.status);\r\n       if( this.props.status == 'all' || task.isComplete == this.props.status)\r\n            return (\r\n                <li className = 'gridTasks' key={index} onClick={()=>{this.props.changeStatus(index)}}> \r\n                        {task.title}\r\n                </li>\r\n            );\r\n    }\r\n\r\n    render(){\r\n        var tasks = this.props.taskList.map(this.newTask);\r\n        return (\r\n            <ul className = 'tasks'>\r\n                {tasks}\r\n            </ul>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TasksList from './TasksList';\nimport TasksGrid from './TasksGrid';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      tasks: [],\n      status: false,\n      view: 'list'\n    }\n  }\n\n  setTaskType(status){\n    this.setState({status});\n  }\n\n  //Adding the entered task into array and setting the default input to blank\n  onEnter(e) {\n    //Prevents the page from reloading after entering\n    e.preventDefault();\n    if(this.inputTask.value !== ''){\n      var enteredTask = {\n        title: this.inputTask.value,\n        isComplete: false\n      }\n      //Adds the task into the array\n      this.setState((prevState) => {\n        return {tasks:[...prevState.tasks, ...[enteredTask]]}\n      });\n      //Setting the field blank after entering\n      this.inputTask.value = '';\n    }\n  }\n\n  changeStatus(index){\n    const tasks = this.state.tasks;\n    tasks[index].isComplete = !tasks[index].isComplete;\n    this.setState({tasks})\n  }\n\n  //this is to clear the tasks in the array\n  clearTask = () => {\n    this.setState(()=>{\n      return {tasks: []};\n    })\n  }\n\n  listView = () =>{\n    this.setState(()=>{\n      return {view: 'list'};\n    })\n  }\n\n  gridView = () =>{\n    this.setState(()=>{\n      return {view: 'grid'};\n    })\n  }\n\n  list= ()=> {\n    return <div><TasksList status={this.state.status}  changeStatus={((index)=>{this.changeStatus(index)})} taskList={this.state.tasks}/></div>\n  }\n\n  grid= ()=> {\n    return <div><TasksGrid status={this.state.status}  changeStatus={((index)=>{this.changeStatus(index)})} taskList={this.state.tasks}/></div>\n  }\n\n\n  render() {\n    var changeview;\n    if(this.state.view === 'list'){\n      changeview = this.list()\n    }\n    else if(this.state.view === 'grid'){\n      changeview = this.grid()\n    }\n    return  <div className='ui'>\n              <div className='view-bar'>\n                <button className='view' onClick={this.listView}>List</button>\n                <button className='view' onClick={this.gridView}>Grid</button>\n              </div>\n              <div className='header'>\n                <p>Daily Todo List</p>\n              </div>\n              <form onSubmit={(e)=>{this.onEnter(e)}} className='ui_text'>\n                <input \n                  type='text' \n                  className='textInput' \n                  placeholder='Enter the task'\n                  ref={(todo)=>{this.inputTask = todo}}\n                  />\n              </form>\n              <div className='tab-navigate'>\n                <button className='btn' onClick={()=>{this.setTaskType(false)}}>Active</button>\n                <button className='btn' onClick={()=>{this.setTaskType(true)}}>Completed</button>\n                <button className='btn' onClick={()=>{this.setTaskType('all')}}>All</button>\n                <button className='btn'onClick={this.clearTask}>Clear</button>\n              </div>\n              <div className='task-block'>\n              {changeview}\n              </div>\n            </div>\n  }\n}\n\n\nexport default App;\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}